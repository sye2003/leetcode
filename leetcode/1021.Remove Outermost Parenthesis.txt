C++
String
Stack

class Solution {
public:
    string removeOuterParentheses(string s) {
        stack<char> store;
        string ans = "";
        for(auto c : s){
            if(c == '('){
                if(store.size() > 0){
                    ans += c;
                }
                store.push(c);
            }
            else if(c == ')'){
                if(store.size() > 1){
                    ans += c;
                }
                store.pop();
            }
        }
        return ans;
    }
};



_____________________________________________________



C++
String
Queue



class Solution {
public:
    string removeOuterParentheses(string s) {
        queue<char> q;
        int op=0;
        string ans="";
        for (int i=0;i<s.size();i++){
            if (s[i]=='('){
                op++;
                q.push('(');
            }
            else{
                op--;
                if (op==0) {
                    q.pop();
                    while (!q.empty()){
                        ans+=q.front();
                        q.pop();
                    }
                    continue;
                }
                else q.push(')');
            }
        }
        return ans;
    }
};


________________________________________________________


C++
Array
String


class Solution
{
public:
    string removeOuterParentheses(string s)
    {
        int count1=0,count2=0;
        vector<string> vec;
        string x="";
        string ans="";
        for(int i=0;i<s.size();i++)
        {
            x+=s[i];
            if(s[i]=='(')
            {
                count1++;
            }
            else
            {
                count2++;
            }
            if(count1==count2)
            {
                vec.push_back(x);
                x="";
            }
        }
        for(int i=0;i<vec.size();i++)
        {
            for(int j=1;j<vec[i].size()-1;j++)
            {
             ans+=vec[i][j];
            }
        }
        return ans;
    }
};







