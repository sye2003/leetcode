class Solution {
public:
    int numJewelsInStones(string jewels, string stones) {

        unordered_map <char, int> isVisited;

        for (int i=0;i<stones.size();i++) {
            isVisited[stones[i]]++;
        }
        int sumTotal=0;
        for(auto x:jewels){
            if(isVisited[x]){
                sumTotal+=isVisited[x];
            }
        }
        return sumTotal;
        
    }
};

_______________________________________________
Un-Ordered map


class Solution {
public:
    int numJewelsInStones(string &jewels, string &stones) {
        unordered_map<char, bool> tmp;
        int count {0};
        for(auto &it : jewels){
            if(tmp.find(it) == tmp.end()){
                tmp[it] = true;
            }
        }
        for(auto &it : stones){
            if(tmp.find(it) != tmp.end()){
                ++count;
            }
        }
        return count;
    }
};

__________________________________________________

 Sorting


Time complexity: O(nlogn)
Space complexity: O(1)

sort(jewels.begin(), jewels.end());
sort(stones.begin(), stones.end());

int i=0,j=0, n = jewels.size(), m= stones.size();
int count=0;
while(i<n and j<m){
	if(jewels[i]==stones[j]){
		count++;
		j++;
	}
	else if(jewels[i]<stones[j]) i++;
	else j++;
}
return count;



_____________________________________________________

 Brute Force
Time complexity: O(n^2)
Space complexity: O(1)



int count=0; 

for(int i=0;i<jewels.size();i++){
	for(int j=0;j<stones.size();j++){
		if(stones[j]==jewels[i]) count++;
	}
}
return count;

