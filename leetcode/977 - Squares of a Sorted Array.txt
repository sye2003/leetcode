class Solution {
public:
	vector<int> sortedSquares(vector<int>& a) {
	
	vector<int> toReturn;
	for(int i =0; i < A.size(); i++){
		toReturn.push_back(A[i] * A[i]);
	}

	sort(toReturn.begin(), toReturn.end());
	return roReturn;
	}
};


class Solution {
public:
    vector<int> sortedSquares(vector<int>& a) {
        for (auto &x : a) x *= x;
        sort(a.begin(), a.end());
        return a;
    }
};



class Solution {
public:
    vector<int> sortedSquares(vector<int>& A) {
        std::transform(begin(A), end(A), begin(A), [](int a){ return a * a; });
        sort(begin(A), end(A));
        return A;
    }
};

========================================

vector<int> sortedSquares(vector<int>& nums) {
        //Two Pointer
        int n = nums.size();
        int left = 0, right = n-1;
        vector<int>v(n,0);
        for(int i = n-1;i>=0;i--){
            if(abs(nums[left])>nums[right]){
                v[i] = nums[left]*nums[left];
                left++;
            }
            else{
                v[i] = nums[right]*nums[right];
                right--;
            }
        }
        return v;
    }

===============================================

class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        int i=0,j=nums.size()-1, k=nums.size()-1;
        vector<int>v(nums.size(),0);
        while(i<=j)
        {
            if(abs(nums[i])>=abs(nums[j]))
             v[k--]=(pow(nums[i++],2));
            
            else v[k--]=(pow(nums[j--],2));
        }
        return v;
    }
};

=====================================================


class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        int len = nums.size(), r = 0;
        auto start = begin(nums), ed = end(nums), i = lower_bound(start, ed, 0), j = i - 1;
        vector<int> res(len);
        while (j >= start && i != ed) {
            // first case: negative number with smaller absolute value
            if (-*j < *i) res[r++] = *j * *j--;
            // second case: positive number with smaller absolute value
            else res[r++] = *i * *i++;
        }
        // dealing with leftover negative numbers, if any
        while (j >= start) {
            res[r++] = *j * *j--;
        }
        // dealing with leftover positive numbers, if any
        while (i != ed) {
            res[r++] = *i * *i++;
        }
        return res;
    }
};


========================================

Binary Search
--------------
class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        vector<int> answer;
        for (int i = 0; i < nums.size(); i++) {
            int low = 0;
            int high = answer.size() - 1;
            int square = nums[i] * nums[i];
            bool inserted = false;
            
            if (i == 0) {
                answer.push_back(square);
                continue;
            }
            while (low <= high) {
                int search = (low + high) / 2;
                if (answer[search] < square) {
                    low = search + 1;
                }
                else if (answer[search] > square) {
                    high = search - 1;
                }
                else {
                    answer.insert(answer.begin() + search, square);
                    inserted = true;
                    break;
                }
            }
            if (inserted) {
                continue;
            }
            answer.insert(answer.begin() + low, square);
        }
        return answer;
    }
};

=============================================

Recursion
-----------
class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        int z = nums.size();
        vector<int> res(z);
        func(res, nums, 0, z - 1, z - 1);
        return res ;
    }
    void func(vector<int>& v, vector<int>& nums, int i, int j, int z) {
        if (i > j)
            return ;
        if (abs(nums[i]) >= abs(nums[j]))
            v[z--] = nums[i] * nums[i++];
        else
            v[z--] = nums[j] * nums[j--];
        func(v, nums, i, j, z);      
    }
};
















