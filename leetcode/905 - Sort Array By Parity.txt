Iterator
========

class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) {
        vector<int>ans;
         
        for(int i=0; i<nums.size(); i++){
        		if(nums[i]%2==0){
        		ans.push_back(nums[i]);
        		}
		}
        for(int i=0; i<nums.size(); i++){
        		if(nums[i]%2 != 0){  // if (nums[i] % 2 == 1)
        		ans.push_back(nums[i]);
        	}
        }
    
    return ans;
        }
};



class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) {
        vector<int>ans;
         vector<int>cont;
        for(int i=0; i<nums.size(); i++){
        if(nums[i]%2==0){
        ans.push_back(nums[i]);
        }
        else{
        cont.push_back(nums[i]);
        }
        }
    ans.insert(ans.end(),cont.begin(), cont.end());
    return ans;
        }
};

Two Pointer Algorithm
======================

vector<int> sortArrayByParity(vector<int>& A) {
    int j=0;
    for(int i=0;i<A.size();i++)
	{
        if(A[i]%2==0)
		{
            swap(A[i],A[j]);
            j++;
		}
	}
    return A;
}

===================================

vector<int> sortArrayByParity(vector<int>& nums) {
        int n = nums.size();
        int i = 0, j = n - 1;
        
        while (i < j) {
            // Condition 1: Swap if nums[i] is odd and nums[j] is even
            if (nums[i] % 2 == 1 && nums[j] % 2 == 0) {
                swap(nums[i], nums[j]); // Swap the elements
                i++; // Move the left pointer right
                j--; // Move the right pointer left
            } 
            // Condition 2: If nums[i] is even and nums[j] is odd, continue without swapping
            else if (nums[i] % 2 == 0 && nums[j] % 2 == 1) {
                i++; // Move the left pointer right
                j--; // Move the right pointer left
            } 
            // Condition 3: If both nums[i] and nums[j] are odd, move the right pointer left
            else if (nums[i] % 2 == 1 && nums[j] % 2 == 1) {
                j--; // Move the right pointer left
            } 
            // Condition 4: If both nums[i] and nums[j] are even, move the left pointer right
            else if (nums[i] % 2 == 0 && nums[j] % 2 == 0) {
                i++; // Move the left pointer right
            }
        }
        
        return nums;
    }

===========================================

Bit Manipulation

class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) {

        vector<int>str(nums.size());
        int i=0;

        for(int start = 0; start < nums.size(); ++start )   
       {
           if((nums[start] & 1) ==0)
           {
               str[i++]=nums[start];
           }
       }
       for(int j=0;j<nums.size();++j)
       {
           if(nums[j] & 1 )
           {
               str[i++]=nums[j];
           }
       }
       return str;
    }
};


class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) {
        int j=nums.size()-1;
        for(int i=0; i<j; ){
            if((nums[i]&1)==1 && (nums[j]&1)==0){
                swap(nums[i], nums[j]);
                i++, j--;
            }
            else{
                if ((nums[i]&1)==0) i++;
                if ((nums[j]&1)==1) j--;
            } 
        }
        return nums;
    }
};


Sort
=====
class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) {
        sort(nums.begin(), nums.end(), [&](int x, int y){return (x&1)<(y&1);}); return nums;
    }
};


Deque
======
class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) {
        deque<int> q;
        for(int x: nums){
            if((x&1)==1) 
                q.push_back(x);
            else
                q.push_front(x);     
        }
        return vector<int>(q.begin(), q.end());
    }
};


Recursion
===========
class Solution {
public:

void check(vector<int> & ans,int ind,vector<int>& nums){
  
	if(ind==nums.size()){
    		return;
  	}

	if(nums[ind]%2==0)
		ans.push_back(nums[ind]);
	check(ans,ind+1,nums);

	if(nums[ind]%2!=0)
		ans.push_back(nums[ind]);
}

vector<int> sortArrayByParity(vector<int>& nums) {    
    vector<int> ans;
     check(ans,0,nums);
     return ans;
    }
};












